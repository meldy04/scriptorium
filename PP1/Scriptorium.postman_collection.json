{
	"info": {
		"_postman_id": "42d3eb5f-fbda-4b5c-86da-e814f2026c48",
		"name": "Scriptorium",
		"description": "# ðŸš€ Meldy Asili Bile\n\nThis documentation describes CRUD operations and tests for the CSC309 Scriptorium Backend.\n\n## ðŸ”– Introduction\n\n#### **Step 1: Set Up Environement**\n\nTo set up the environment, please run the `run.sh` and `startup.sh` files.\n\nFor running tests which require authorisation, please use the registered admin user: 'admin' with password 'admin123'.\n\n#### **Step 2: Send requests**\n\nThis project allows for a range of POST, GET, PUT, and DELETE HTTP methods.\n\nOpen each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\nReferences:\n\nYash - AI & Growth. (2022, March 23). _How to create API documentation in Postman \\[under 5 Minutes\\] 2023_ \\[Video\\]. YouTube. [https://www.youtube.com/watch?v=6_bYRsbeyCc](https://www.youtube.com/watch?v=6_bYRsbeyCc)\n\nReplit. (n.d.). _CSC309 W6_. Replit. [https://replit.com/@kianoosh76/CSC309-W6?v=1#README.md](https://replit.com/@kianoosh76/CSC309-W6?v=1#README.md)\n\nReplit. (n.d.-a). _CSC309 W5_. Replit. https://replit.com/@kianoosh76/CSC309-W5?v=1#README.md",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39439945"
	},
	"item": [
		{
			"name": "RegisterUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"SecurePassword123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"phone\": \"1234567890\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/users/register",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"users",
						"register"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response. The test here registers a user by providing JSON data and outputs a response code given the scenario.\n\nA successful POST request returns a`201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"newuser4@example.com\",\n  \"password\": \"SecurePassword123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/users/login",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"users",
						"login"
					]
				},
				"description": "This POST request, submits data to the API to allow a user to login. If the user data is found in the database, the request returns a `200 OK` response. The request is dependent upon utilising a hashed password from the database, hence, the token generated at registration must be used here."
			},
			"response": []
		},
		{
			"name": "editProfile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NDY3ODMsImV4cCI6MTczMDY1MDM4M30.d7fr07grTcJ4mQ8jR09RlVUpmaXIQYaJlIYOQrSPtdg",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": 5,\n  \"firstName\": \"UpdatedFirstName\",\n  \"lastName\": \"UpdatedLastName\",\n  \"avatar\": \"https://example.com/avatar.png\",\n  \"phone\": \"1234567890\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/users/edit",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"users",
						"edit"
					]
				},
				"description": "This PUT request is used to overwrite existing data in a user's profile. The user is identified by their id number and authorisation is implemented to ensure a user can only update their own profile. This uses the generated token to allow for use of plain text for the JSON data request.\n\nA successful PUT request returns a `200 OK` response code. If an unauthorised user attempts to edit a profile, a `403 Forbidden` response is output."
			},
			"response": []
		},
		{
			"name": "createBlog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NTExMzIsImV4cCI6MTczMDY1NDczMn0.Vzk-_EYH90GsAxGQHwyPKdyyBqa9keOVlgQ7ix29jpc",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"My First Blog Post\",\n  \"description\": \"This is a description of my first blog post.\",\n  \"content\": \"This is the full content of the blog post.\",\n  \"tags\": \"blog, first, introduction\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/blogs/create",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"blogs",
						"create"
					]
				},
				"description": "This is an endpoint allowing registered users to create blog posts. The POST request is used to input data into the prisma database.\n\nA successful response will have a `201 CREATED` status."
			},
			"response": []
		},
		{
			"name": "editBlog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NDY3ODMsImV4cCI6MTczMDY1MDM4M30.d7fr07grTcJ4mQ8jR09RlVUpmaXIQYaJlIYOQrSPtdg",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 1,\n  \"title\": \"My Updated Blog Post\",\n  \"description\": \"Updated description.\",\n  \"content\": \"Updated content.\",\n  \"tags\": \"updated, blog\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/blogs/edit",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"blogs",
						"edit"
					]
				},
				"description": "This PUT request allows users to edit existing blog posts with updated data. For security and functionality, the user must be authorised i.e. logged into their account in order to make edits and will only be able to edit blogs which they have written.\n\nA successful response will have a `200 OK` status."
			},
			"response": []
		},
		{
			"name": "deleteBlog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NDY3ODMsImV4cCI6MTczMDY1MDM4M30.d7fr07grTcJ4mQ8jR09RlVUpmaXIQYaJlIYOQrSPtdg",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/blogs/delete",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"blogs",
						"delete"
					]
				},
				"description": "This is DELETE request allowing users to delete their own blog posts. The request deletes blogs given the blogPost id in the prisma database.\n\nA successful response will have a `204 Success - No Content` status."
			},
			"response": []
		},
		{
			"name": "blogComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NjEzODYsImV4cCI6MTczMDY2NDk4Nn0.EjjYcub6rMbwlyjsnBiEjV6AyRJ7Zt8QZ7eA3ZXyL_U",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\": \"This is a comment on the blog post.\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/blogs/:id/comments",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"blogs",
						":id",
						"comments"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is an endpoint allowing registered users to comment on existsing blog posts on the system. The POST request is used to input data into the prisma database and increment the comments model.\n\nThe system ensures that the request body is not null, returning `400 Bad Request` if it is and successful response will have a `201 CREATED` status."
			},
			"response": []
		},
		{
			"name": "blogVote",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NjEzODYsImV4cCI6MTczMDY2NDk4Nn0.EjjYcub6rMbwlyjsnBiEjV6AyRJ7Zt8QZ7eA3ZXyL_U",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"voteType\": \"up\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/blogs/:id/vote",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"blogs",
						":id",
						"vote"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is an endpoint allowing registered users to vote 'up' or 'down' on existsing blog posts on the system. The POST request is used to input data into the prisma database and increment the vote count for blogs.\n\nA successful response will have a `200 OK` status."
			},
			"response": []
		},
		{
			"name": "codeExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"language\": \"PYTHON\",\n  \"code\": \"print('Hello World')\",\n  \"input\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/code/execute",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"code",
						"execute"
					]
				},
				"description": "This POST request allows users and visitors to execute code.\n\nA successful POST response will have a `200 OK` status and return a response body of the compiled code."
			},
			"response": []
		},
		{
			"name": "createTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NzY3OTEsImV4cCI6MTczMDY4MDM5MX0.ysB-uI8lVX1e4PPP3mgyU2zhZjdezpfofk6YMz_WuGc",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Second Template\",\n  \"explanation\": \"This template is an example for testing.\",\n  \"tags\": \"example, testing\",\n  \"code\": \"console.log('Hello World');\",\n  \"language\": \"JavaScript\",\n  \"userId\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/templates/create",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"templates",
						"create"
					]
				},
				"description": "This is an endpoint allowing registered users to create templates. The POST request is used to input data into the prisma database into the Templates table. In order to create a new template, the user must be registered, which is authorised using their generated token.\n\nA successful response will have a `201 CREATED` status and a new template is generated."
			},
			"response": []
		},
		{
			"name": "getTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/templates/:id",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"templates",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" template data from the database. This can be used by either a registered user or a site visitor, hence authorrisation is not needed. As a GET request, there is no request body, but we use query parameters to specify the resource to get data for.\n\nA successful GET response will have a `200 OK` status."
			},
			"response": []
		},
		{
			"name": "editTemplateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NzY3OTEsImV4cCI6MTczMDY4MDM5MX0.ysB-uI8lVX1e4PPP3mgyU2zhZjdezpfofk6YMz_WuGc",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Template Title\",\n    \"explanation\": \"Updated explanation for the template.\",\n    \"tags\": \"updated, tags\",\n    \"code\": \"console.log('Updated Hello World');\",\n    \"language\": \"JavaScript\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/templates/edit/:id",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"templates",
						"edit",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This PUT request allows users to edit existing templates with updated data given the id of the template. A user will be able to make edits to their template.\n\nA successful response will have a `200 OK` status."
			},
			"response": []
		},
		{
			"name": "editTemplateVisitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NzY3OTEsImV4cCI6MTczMDY4MDM5MX0.ysB-uI8lVX1e4PPP3mgyU2zhZjdezpfofk6YMz_WuGc",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Attempt to Update\",\n    \"explanation\": \"Should not be allowed.\",\n    \"tags\": \"attempt, update\",\n    \"code\": \"console.log('Hello World');\",\n    \"language\": \"JavaScript\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/templates/edit/:id",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"templates",
						"edit",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This PUT request allows visitors to edit existing templates with updated data by creating a fork of the original template.\n\nA successful response will have a `200 OK` status."
			},
			"response": []
		},
		{
			"name": "deleteTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2NzY3OTEsImV4cCI6MTczMDY4MDM5MX0.ysB-uI8lVX1e4PPP3mgyU2zhZjdezpfofk6YMz_WuGc",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/templates/delete/:id",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"templates",
						"delete",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "This DELETE request allows users to delete existing templates with updated data given the id of the template.\n\nA successful response will have a `200 OK` status and output a message."
			},
			"response": []
		},
		{
			"name": "reportContent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2ODc0MDksImV4cCI6MTczMDY5MTAwOX0.jwwW8ivOArWGvm7uKXW5KY4yEON2Qg35cEr7loI88dY",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"explanation\": \"This post contains abusive language.\",\n  \"userId\": 1,\n  \"blogPostId\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/report",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"report"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request allows a registered user to report inappropriate content including blog posts and/or blog comments.\n\nA successful POST request returns a`201 Created` response code."
			},
			"response": []
		},
		{
			"name": "hideContent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2ODc2MjAsImV4cCI6MTczMDY5MTIyMH0.7kGunu5CoebYM5ug-3TfEtbcy_ZCxUT7t2DYgwB5u6M",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"contentId\": 1,\n  \"contentType\": \"BlogPost\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/admin/hideContent",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"admin",
						"hideContent"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request allows a registered admin user to hide content, making it inaccessible to other users.\n\nA successful POST request returns a`201 Created` response code."
			},
			"response": []
		},
		{
			"name": "sortPosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2ODc2MjAsImV4cCI6MTczMDY5MTIyMH0.7kGunu5CoebYM5ug-3TfEtbcy_ZCxUT7t2DYgwB5u6M",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/admin/sort?contentType=BlogPost",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"admin",
						"sort"
					],
					"query": [
						{
							"key": "contentType",
							"value": "BlogPost"
						}
					]
				},
				"description": "This is a GET request, returning a sorted list of blog posts. In order to sort the post, the user must be registered and categorised as an admin user.\n\nA successful GET request returns a`200 OK` response code."
			},
			"response": []
		},
		{
			"name": "authorViewHidden",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImVtYWlsIjoibmV3dXNlcjRAZXhhbXBsZS5jb20iLCJpYXQiOjE3MzA2ODc2MjAsImV4cCI6MTczMDY5MTIyMH0.7kGunu5CoebYM5ug-3TfEtbcy_ZCxUT7t2DYgwB5u6M",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}api/posts/:postId",
					"host": [
						"{{base_url}}api"
					],
					"path": [
						"posts",
						":postId"
					],
					"variable": [
						{
							"key": "postId",
							"value": ""
						}
					]
				},
				"description": "This is a GET request, returning a hidden blog post to the author of said post. In order to sort the post, the user must be logged into their account and the author of the hidden post.\n\nA successful GET request returns a`200 OK` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}